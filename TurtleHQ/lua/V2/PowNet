REDNET_TIMEOUT = 1
--===== SET REDNET PROTOCOL =====--
SERVER_PROTOCOL = "PowNet:Server"
DRONE_PROTOCOL = "PowNet:Drone"

MODULENAME = os.getComputerLabel()
MESSAGE_TYPE = {
    GET = 0,
    SET = 1,
    INIT = 2,
    REGISTER = 3,
    UPDATE = 4,
    CALL = 5
}
local m_ServerEvents = {}
local m_DroneEvents = {}
local m_Update

--===== OPEN REDNET =====--
for _, side in ipairs(redstone.getSides()) do
    if peripheral.getType(side) == "modem" then
        rednet.open(side)
    end
end

if not rednet.isOpen() then
    printError("could not open rednet")
    return
end

function Lookup(p_Name)
    return rednet.lookup(SERVER_PROTOCOL, p_Name)
end

function Connect(p_Module)
    MAINFRAME = rednet.lookup(SERVER_PROTOCOL, "MAINFRAME")
    if not MAINFRAME then
        print("Failed to connect to MainFrame")
        return false
    end
        -- Initialize our data for faster lookup
    if(p_Module == nil) then
        p_Module = MODULENAME
    end
    local s_Message = PowNet.newMessage(MESSAGE_TYPE.INIT, p_Module)
    local s_Response = PowNet.sendAndWaitForResponse(MAINFRAME, s_Message, PowNet.SERVER_PROTOCOL)
    if s_Response then
        return true, s_Response
    else
        error("Failed to fetch data")
        return false
    end
end

function newMessage(messageType, dataKey, data)
    return {
        type = messageType,
        ID = math.random(0, 2^30),
        dataKey = dataKey,
        data = data,
    }
end

function RegisterEvents( p_ServerEvents, p_DroneEvents, p_Update )
    m_ServerEvents = p_ServerEvents
    m_DroneEvents = p_DroneEvents
    m_Update = p_Update
end
function UpdateModule(p_Module, p_Path)
    local s_Message = {
        type = MESSAGE_TYPE.UPDATE,
        ID = math.random(0, 2^30),
        dataKey = p_Module,
        data = false
    }

    local s_Response = sendAndWaitForResponse(MAINFRAME, s_Message, SERVER_PROTOCOL)
    if not s_Response then
        print("Failed to receive program: " .. p_Module)
        return
    end
    if(s_Response == "InvalidName") then
        error("No module by this name: " .. p_Module)
    end
    if(p_Path == nil) then
        p_Path = "/" .. p_Module
    end
    local file = fs.open(p_Path, "w")
    file.write(s_Response)
    file.close()
end

function Update()
    if(m_Update == nil) then
        return
    end
    m_Update()
end
function main()
    while true do
        print("Waiting for Server signal...")
        local serverID, serverMessage = rednet.receive(PowNet.SERVER_PROTOCOL)
        if type(serverMessage) == "table" then
            if(serverMessage.type == PowNet.MESSAGE_TYPE.INIT and serverMessage.ID == 0) then
                print("Server has been initialized. Rebooting and performing updates.")
                os.reboot()
            end
            if(m_ServerEvents[serverMessage.dataKey] ~= nil) then
                print("Received: " .. serverMessage.dataKey)
                local s_Response = m_ServerEvents[serverMessage.dataKey](serverID, serverMessage)
                if(s_Response ~= nil) then
                    serverMessage.data = s_Response
                    rednet.send(serverID, serverMessage, SERVER_PROTOCOL)
                end
            end
        end
        Update()
    end
end

function droneMain()
    while true do
        print("Waiting for Drone signal...")

        local droneID, droneMessage = rednet.receive(PowNet.DRONE_PROTOCOL)
        if type(droneMessage) == "table" then
            if(m_DroneEvents[droneMessage.dataKey] ~= nil) then
                local s_Response = m_DroneEvents[droneMessage.dataKey](droneID, droneMessage)
                droneMessage.data = s_Response
                rednet.send(droneID, droneMessage, DRONE_PROTOCOL)
            end
        end
        Update()
    end
end

function Send(p_Recipient, p_Message, p_Protocol)
    local s_RecipientID = p_Recipient
    if(type(p_Recipient) == "string") then
        s_RecipientID = PowNet.Lookup(p_Recipient)
        if(s_RecipientID == nil) then
            print("Could not find server: " .. p_Recipient)
            return false
        end
    end
    rednet.send(s_RecipientID, p_Message, p_Protocol)
    return s_RecipientID
end

function SendToServer(p_ServerName, p_Message)
    Send(p_ServerName, p_Message, SERVER_PROTOCOL)
    return true
end

function SendToDrone(p_DroneID, p_Message)
    Send(p_DroneID, p_Message, SERVER_PROTOCOL)
    return true
end

function sendAndWaitForResponse(p_Recipient, message, protocol)
    if(p_Recipient == -1) then
        p_Recipient = MAINFRAME
    end
    local s_RecipientID = Send(p_Recipient, message, protocol)

    local attemptNumber = 1
    while true do
        local senderID, reply = rednet.receive(protocol, REDNET_TIMEOUT)
        if senderID == s_RecipientID and type(reply) == "table" and reply.type == message.type and reply.ID == message.ID then
            return reply.data
        elseif not senderID then
            if attemptNumber < 3 then
                rednet.send(s_RecipientID, message, protocol)
                attemptNumber = attemptNumber + 1
            else
                return false
            end
        end
    end
end

--===== USER INTERFACE =====--
function control()
    while true do
        local event, key = os.pullEvent("key")
        if key == keys.backspace then
            break
        end
    end
end

function InitServer()
    print(MODULENAME)
    local host = rednet.lookup(SERVER_PROTOCOL, MODULENAME)
    if host and host ~= os.computerID() then
        return false, (os.getComputerLabel() " server already running?")
    end
    rednet.host(SERVER_PROTOCOL, MODULENAME)
    return true
end

