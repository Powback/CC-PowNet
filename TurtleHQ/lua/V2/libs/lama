local apiPath = "apis/lama"
local stateFile = {
position  = "/.lama-state",
waypoints = "/.lama-waypoints",
fuel      = "/.lama-fuel",
move      = "/.lama-move-state",
path      = "/.lama-path-state",
wrap      = "/.lama-wrap-state"
}
local invalidStateFile = "/.lama-invalid"
-- This should be an integer value in the interval [0, 99], where lower values
local startupPriority = 10
local startupBackupFile = "/.lama-startup-backup"
local useMinecraftCoordinates = true
if lama then
local env = getfenv()
for k, v in pairs(lama) do
env[k] = v
end
return
end
local state, private
version = "1.4c"
side = {forward = 0, right = 1, back  = 2, left = 3,
north   = 0, east  = 1, south = 2, west = 3,
front   = 0,
["0"]   = 0, ["1"] = 1, ["2"] = 2, ["3"] = 3,
[0] = "north", [1] = "east", [2] = "south", [3] = "west"}
reason = {
unknown = "unknown",
queue_full = "queue_full",
coroutine = "coroutine",
fuel = "fuel",
block = "block",
turtle = "turtle",
unbreakable_block = "unbreakable_block",
entity = "entity",
invulnerable_entity = "invulnerable_entity"
}
function get()
private.resume()
local position = state.position
return private.toMC(position.x, position.y, position.z, position.f)
end
function getX()
local x, _, _, _ = get()
return x
end
function getY()
local _, y, _, _ = get()
return y
end
function getZ()
local _, _, z, _ = get()
return z
end
function getPosition()
return vector.new(get())
end
function getFacing()
local _, _, _, f = get()
return f
end
function set(x, y, z, facing)
assert(private.isInteger(x), "'x' must be an integral number")
assert(private.isInteger(y), "'y' must be an integral number")
assert(private.isInteger(z), "'z' must be an integral number")
assert(private.isFacing(facing),
"'facing' must be one of the lama.side constants")
private.resume(true)
if private.isLocked() then
error("Cannot set position while moving or refueling.")
end
private.reset()
x, y, z, facing = private.fromMC(x, y, z, facing)
local position = state.position
position.x = x
position.y = y
position.z = z
position.f = facing
private.save("position")
return get()
end
function forward(tries, aggressive)
private.resume()
if private.isLocked() then
return false, reason.coroutine
end
return private.forward(tries, aggressive)
end
function back(tries)
private.resume()
if private.isLocked() then
return false, reason.coroutine
end
return private.back(tries)
end
function up(tries, aggressive)
private.resume()
if private.isLocked() then
return false, reason.coroutine
end
return private.up(tries, aggressive)
end
function down(tries, aggressive)
private.resume()
if private.isLocked() then
return false, reason.coroutine
end
return private.down(tries, aggressive)
end
function moveto(x, y, z, facing, tries, aggressive, longestFirst)
return navigate({{x = x, y = y, z = z, facing = facing}},
tries, aggressive, longestFirst)
end
getfenv()["goto"] = moveto
function navigate(path, tries, aggressive, longestFirst)
assert(type(path) == "table", "'path' must be a table")
assert(tries == nil or private.isInteger(tries),
"'tries' must be an integral number or omitted")
assert(aggressive == nil or type(aggressive) == "boolean",
"'aggressive' must be a boolean or omitted")
assert(longestFirst == nil or type(longestFirst) == "boolean",
"'longestFirst' must be a boolean or omitted")
private.resume()
if private.isLocked() then
return false, reason.coroutine
end
local absPath = {}
for k, v in ipairs(path) do
if type(v) == "string" then
local x, y, z, f = private.fromMC(waypoint.get(v))
table.insert(absPath, {x = x, y = y, z = z, f = f})
elseif type(v) == "table" then
local x, y, z, f = v.x, v.y, v.z, v.facing
assert(private.isInteger(x),
"'x' at index " .. k .. " must be an integral number")
assert(private.isInteger(y),
"'y' at index " .. k .. " must be an integral number")
assert(private.isInteger(z),
"'z' at index " .. k .. " must be an integral number")
assert(f == nil or private.isFacing(f),
"'facing' at index " .. k ..
" must be one of the lama.side constants or omitted")
x, y, z, f = private.fromMC(x, y, z, f)
table.insert(absPath, {x = x, y = y, z = z, f = f})
else
error("Invalid path entry at index " .. k)
end
end
if #absPath == 0 then
return true
end
for i = 1, #absPath - 1 do
absPath[i].f = nil
end
state.path = {
steps = absPath,
tries = tries or 0,
aggressive = aggressive or nil,
longestFirst = longestFirst or nil
}
private.save("path")
return private.navigate()
end
function turnRight()
return turn((getFacing() + 1) % 4)
end
function turnLeft()
return turn((getFacing() - 1) % 4)
end
function turnAround()
return turn((getFacing() + 2) % 4)
end
function turn(towards)
assert(private.isFacing(towards),
"'towards' must be one of the lama.side constants")
private.resume()
if private.isLocked() then
return false, reason.coroutine
end
return private.turn(towards)
end
function refuel(count)
assert(count == nil or (private.isInteger(count) and
count >= 0 and count <= 64),
"'count' must be a positive integral number in [0, 64] or omitted")
private.resume()
if private.isLocked() then
return false, reason.coroutine
end
local id
if count then
id = turtle.native.refuel(count)
else
id = turtle.native.refuel()
end
if id == -1 then
return false, reason.queue_full
end
state.fuel.id = id
private.save("fuel")
local result = private.waitForResponse(id)
state.fuel.id = nil
state.fuel.current = turtle.getFuelLevel()
private.save("fuel")
return result
end
waypoint = {}
function waypoint.add(name, x, y, z, facing)
private.resume()
assert(type(name) == "string" and name ~= "",
"'name' must be a non-empty string")
assert(x == nil or private.isInteger(x),
"'x' must be an integral number or omitted")
assert(y == nil or private.isInteger(y),
"'y' must be an integral number or omitted")
assert(z == nil or private.isInteger(z),
"'z' must be an integral number or omitted")
assert(facing == nil or private.isFacing(facing),
"'facing' must be one of the lama.side constants or omitted")
x, y, z, facing = private.fromMC(x, y, z, facing)
local position = state.position
if x == nil and y == nil and z == nil and facing == nil then
facing = position.f
end
x = x or position.x
y = y or position.y
z = z or position.z
local wasOverwritten = waypoint.exists(name)
state.waypoints[name] = {
x = math.floor(x),
y = math.floor(y),
z = math.floor(z),
f = facing
}
private.save("waypoints")
return wasOverwritten
end
function waypoint.remove(name)
private.resume()
if not waypoint.exists(name) then
return false
end
state.waypoints[name] = nil
private.save("waypoints")
return true
end
function waypoint.exists(name)
private.resume()
assert(type(name) == "string" and name ~= "",
"'name' must be a non-empty string")
return state.waypoints[name] ~= nil
end
function waypoint.get(name)
private.resume()
assert(waypoint.exists(name),
"no such waypoint, '" .. tostring(name) .. "'")
local w = state.waypoints[name]
return private.toMC(w.x, w.y, w.z, w.f)
end
function waypoint.iter()
private.resume()
local name
return function()
local coordinate
name, coordinate = next(state.waypoints, name)
if name then
return name, private.toMC(coordinate.x, coordinate.y,
coordinate.z, coordinate.f)
end
end
end
function waypoint.moveto(name, tries, aggressive, longestFirst)
x, y, z, facing = waypoint.get(name)
return moveto(x, y, z, facing, tries, aggressive, longestFirst)
end
waypoint["goto"] = waypoint.moveto
function init()
private.resume()
end
function startupResult()
private.resume()
if not private.startupResult then
return true
end
return private.startupResult.result, private.startupResult.reason
end
function hijackTurtleAPI(restore)
if restore then
if not turtle._lama then return end
turtle.forward   = turtle._lama.forward
turtle.back      = turtle._lama.back
turtle.up        = turtle._lama.up
turtle.down      = turtle._lama.down
turtle.turnRight = turtle._lama.turnRight
turtle.turnLeft  = turtle._lama.turnLeft
turtle.refuel    = turtle._lama.refuel
turtle._lama = nil
else
if turtle._lama then return end
turtle._lama = {
forward   = turtle.forward,
back      = turtle.back,
up        = turtle.up,
down      = turtle.down,
turnRight = turtle.turnRight,
turnLeft  = turtle.turnLeft,
refuel    = turtle.refuel
}
turtle.forward   = function() return forward() ~= false end
turtle.back      = function() return back() ~= false end
turtle.up        = function() return up() ~= false end
turtle.down      = function() return down() ~= false end
turtle.turnRight = function() return turnRight() ~= false end
turtle.turnLeft  = function() return turnLeft() ~= false end
turtle.refuel    = function() return refuel() ~= false end
end
end
if useMinecraftCoordinates then
for k, v in pairs(side) do
if type(v) == "number" then
side[k] = (v + 2) % 4
end
end
side[0], side[1], side[2], side[3] = side[2], side[3], side[0], side[1]
end
do
local function makeReadonly(table, name)
setmetatable(table, {
__index = function(t,k)
error("Trying to access invalid '" .. name ..
"' constant '" .. k .. "'.")
end,
__newindex = function()
error("Trying to modify readonly table.")
end
})
end
makeReadonly(side, "lama.side")
makeReadonly(reason, "lama.reason")
end
private = {}
private.direction = {
[1] = "forward", [2] = "back", [3] = "up", [4] = "down",
forward = 1,     back = 2,     up = 3,     down = 4
}
state = {
position = {x = 0, y = 0, z = 0, f = 0},
waypoints = {},
fuel = {current = turtle.getFuelLevel()},
move = nil,
path = nil,
wrap = 0
}
private.schema = {}
private.schema[version] = {
position = {
type = "table",
properties = {
x = {type = "number", value = private.isInteger},
y = {type = "number", value = private.isInteger},
z = {type = "number", value = private.isInteger},
f = {type = "number", value = private.isFacing}
}
},
waypoints = {
type = "table",
entries = {
type = "table",
keytype = "string",
properties = {
x = {type = "number", value = private.isInteger},
y = {type = "number", value = private.isInteger},
z = {type = "number", value = private.isInteger},
f = {type = "number", value = private.isFacing,
optional = true}
}
}
},
fuel = {
type = "table",
properties = {
current = {type = "number", value = private.isInteger},
id      = {type = "number", value = private.isInteger,
optional = true}
}
},
move = {
type = "table",
properties = {
direction = {
type = "number",
value = function(v) return private.direction[v] ~= nil end
},
tries = {type = "number", value = private.isInteger},
aggressive = {type = "boolean", optional = true}
}
},
path = {
type = "table",
properties = {
steps = {
type = "table",
entries = {
type = "table",
properties = {
x = {type = "number", value = private.isInteger},
y = {type = "number", value = private.isInteger},
z = {type = "number", value = private.isInteger},
f = {type = "number", value = private.isFacing,
optional = true}
}
}
},
tries = {type = "number", value = private.isInteger},
aggressive = {type = "boolean", optional = true},
longestFirst = {type = "boolean", optional = true}
}
},
wrap = {type = "number", value = private.isInteger}
}
private.schema["1.2"] = {
move = {
type = "table",
optional = true,
properties = {
direction = {
type = "number",
value = function(v) return private.direction[v] ~= nil end
},
preMoveFuel = {type = "number", value = private.isInteger},
tries = {type = "number", value = private.isInteger},
aggressive = {type = "boolean"}
},
upgrade = function(value)
state.fuel.current = value.preMoveFuel
private.save("fuel")
return {value.direction, value.tries, value.aggressive}
end
}
}
private.schema["1.0"] = {
type = "table",
properties = {
position = {
type = "table",
properties = {
x = {type = "number", value = private.isInteger},
y = {type = "number", value = private.isInteger},
z = {type = "number", value = private.isInteger},
f = {type = "number", value = private.isFacing}
}
},
moving = {
type = {"boolean", "string"},
value = function(v)
if type(v) == "string" then
return v == "forward" or
v == "back" or
v == "up" or
v == "down"
end
return true
end
},
preMoveFuel = {type = "number", value = private.isInteger},
tries = {type = "number", value = private.isInteger},
aggressive = {type = "boolean"}
}
}
function private.validate(value, schema)
assert(schema ~= nil, "no schema given")
local function validate(value, schema, path)
if schema.optional and value == nil then
return true
end
if type(schema.type) == "table" then
local ok = false
for _,valueType in pairs(schema.type) do
if type(value) == valueType then
ok = true
break
end
end
if not ok then
return false, path .. ": invalid type; is " .. type(value) ..
", should be one of [" ..
table.concat(schema.type, ", ") .. "]"
end
elseif schema.type and type(value) ~= schema.type then
return false, path .. ": invalid type; is " .. type(value) ..
", should be " .. schema.type
end
if schema.value and not schema.value(value) then
return false, path .. ": invalid value"
end
if schema.properties then
for property, propertySchema in pairs(schema.properties) do
local result, location = validate(value[property],
propertySchema,
path .. "." .. property)
if not result then
return result, location
end
end
end
if schema.entries then
for key, entry in pairs(value) do
if schema.entries.keytype and
type(key) ~= schema.entries.keytype
then
return false, path .. "[" .. key ..
"]: invalid key type; is " .. type(key) ..
", should be " .. schema.entries.keytype
end
local result, location = validate(entry,
schema.entries,
path .. "[" .. key .. "]")
if not result then
return result, location
end
end
end
return true
end
return validate(value, schema, "value")
end
function private.isInteger(value)
return type(value) == "number" and
value == math.floor(value)
end
function private.isFacing(value)
return type(value) == "number" and
private.isInteger(value) and value >= 0 and value < 4
end
function private.save(what)
local data = textutils.serialize(state[what])
local file = fs.open(stateFile[what], "w")
if not file then
private.invalidate()
error("Could not opens state file '" .. what .. "' for writing.")
end
file.write(data)
file.close()
end
function private.load()
if private.upgrade() then
return true
end
local function load(section)
local filename = stateFile[section]
if not fs.exists(filename) then
return true
end
assert(not fs.isDir(filename),
"Invalid state filename '" .. filename .. "': it's a folder.")
local success, result = private.unserialize(filename)
if success then
local valid, failureReason = private.validate(result,
private.schema[version][section])
if valid then
state[section] = result
return true
elseif private.schema["1.2"][section] and
private.validate(result, private.schema["1.2"][section])
then
state[section] = private.schema["1.2"][section].upgrade(result)
return true
else
print("LAMA: Invalid state file '" .. filename ..
"' (" .. failureReason .. ").")
end
end
return false
end
for section, _ in pairs(stateFile) do
if not load(section) then
return false
end
end
return true
end
function private.unserialize(filename)
local file = assert(fs.open(filename, "r"))
local data = file.readAll()
file.close()
local result, _ = loadstring("return " .. data, filename)
if not result then
return true, data
else
return true, setfenv(result, {["inf"] = math.huge})()
end
end
function private.upgrade()
if not fs.exists(stateFile.position) or fs.isDir(stateFile.position) then
return false
end
local success, result = private.unserialize(stateFile.position)
if not success or not private.validate(result, private.schema["1.0"]) then
return false
end
state.position = result.position
if type(result.moving) == "string" then
state.fuel.current = result.preMoveFuel
state.move = {
direction = private.direction[result.moving],
tries = result.tries,
aggressive = result.aggressive
}
state.wrap = 1
end
private.save("position")
private.save("move")
private.save("fuel")
private.save("wrap")
return true
end
function private.reset()
state.position.x = 0
state.position.y = 0
state.position.z = 0
state.position.f = 0
state.fuel = {current = turtle.getFuelLevel()}
state.move = nil
state.path = nil
state.wrap = 0
state.isInitializing = nil
state.isInitialized = true
fs.delete(stateFile.position)
fs.delete(stateFile.fuel)
fs.delete(stateFile.move)
fs.delete(stateFile.path)
fs.delete(stateFile.wrap)
fs.delete(invalidStateFile)
end
function private.isLocked()
return state.move or state.path or state.fuel.id
end
local startupScript = string.format(
[[assert(os.loadAPI(%q))
lama.init()
lama.hijackTurtleAPI()]], apiPath)
local startupHandlers = {
default = {
init = function()
assert(type(startupBackupFile) == "string" and
startupBackupFile ~= "",
"The setting 'startupBackupFile' must be a non-empty string.")
end,
wrap = function()
local haveStartup = fs.exists("/startup")
if haveStartup then
fs.move("/startup", startupBackupFile)
end
local f = assert(fs.open("/startup", "w"),
"Could not open startup script for writing.")
f.writeLine(startupScript)
if haveStartup then
f.writeLine("shell.run('/startup')")
else
end
f.close()
end,
unwrap = function()
fs.delete("/startup")
if fs.exists(startupBackupFile) then
fs.move(startupBackupFile, "/startup")
end
end,
test = function()
return false
end
},
forairan = {
init = function()
local priority = type(startupPriority) == "number" and
string.format("%2d") or
tostring(startupPriority)
local path = "/init-scripts/" .. priority .. "_lama"
local f = assert(fs.open(path, "w"),
"Could not open startup script for writing.")
f.write(startupScript)
f.close()
end,
test = function()
return fs.exists("/init-scripts") and fs.isDir("/init-scripts")
end
},
sangar = {
init = function()
startup.remove("lama")
startup.addString("lama", startupPriority, startupScript)
end,
test = function()
return startup ~= nil and startup.version ~= nil
end
}
}
function private.initStartup()
assert(private.isInteger(startupPriority),
"The setting 'startupPriority' must be an integral number.")
private.startupHandler = startupHandlers.default
for _, handler in pairs(startupHandlers) do
if handler.test() then
private.startupHandler = handler
break
end
end
if private.startupHandler.init then
private.startupHandler.init()
end
end
function private.wrapStartup()
if state.wrap == 0 then
if private.startupHandler.wrap then
private.startupHandler.wrap()
end
end
state.wrap = state.wrap + 1
private.save("wrap")
end
function private.unwrapStartup(force)
if state.wrap == 1 or
(force and state.wrap > 0)
then
if private.startupHandler.unwrap then
private.startupHandler.unwrap()
end
state.wrap = 0
fs.delete(stateFile.wrap)
elseif state.wrap > 0 then
state.wrap = state.wrap - 1
private.save("wrap")
end
end
function private.resume(dontCrash)
if state.isInitialized then
return
end
while state.isInitializing do
os.sleep(1)
end
if fs.exists(invalidStateFile) then
if dontCrash then
return
end
error("Invalid state. Please reinitialize the turtle's position.")
end
assert(turtle, "The lama API can only run on turtles.")
assert(os.getComputerLabel(), "Turtle has no label, required for state persistence.")
assert(turtle.getFuelLevel() ~= "unlimited", "Turtles must use fuel for this API to work correctly.")
if bapil then
apiPath = bapil.resolveAPI(apiPath)
else
local i
local tryPaths =    {
"/rom/apis/lama",
"/rom/apis/turtle/lama",
"/apis/lama",
"/apis/turtle/lama"
}
for i  = 1 , #tryPaths do
if fs.exists(tryPaths[i]) and not fs.isDir(tryPaths[i]) then
apiPath = tryPaths[i]
end
end
end
startupScript = string.format(
[[assert(os.loadAPI(%q))
lama.init()
lama.hijackTurtleAPI()]], apiPath)
assert(type(apiPath) == "string" and apiPath ~= "", "The setting 'apiPath' must be a non-empty string.")
assert(fs.exists(apiPath) and not fs.isDir(apiPath), "No file found at 'apiPath', please make sure it points to the lama API.")
state.isInitializing = true
private.initStartup()
local valid = private.load()
local id
repeat
os.sleep(0.1)
id = turtle.native.detect()
until id ~= -1
private.waitForResponse(id)
private.unwrapStartup(true)
if state.fuel.id then
if id > state.fuel.id then
state.fuel.current = turtle.getFuelLevel()
else
valid = false
end
elseif state.move then
valid = valid and turtle.getFuelLevel() == state.fuel.current or
turtle.getFuelLevel() == state.fuel.current - 1
else
valid = valid and turtle.getFuelLevel() == state.fuel.current
end
if not valid then
state.isInitializing = nil
assert(fs.open(invalidStateFile, "w"),
"Failed to create invalidation file.").close()
error("Invalid state. Please reinitialize the turtle's position.")
end
if state.move then
if turtle.getFuelLevel() == state.fuel.current then
if state.move.tries > 0 then
local result, failureReason =
private.move(state.move.direction,
state.move.tries,
state.move.aggressive)
private.startupResult = {
result = result,
reason = failureReason
}
else
private.startupResult = {
result = false,
reason = private.tryGetReason(state.move.direction)
}
private.endMove()
end
elseif turtle.getFuelLevel() == state.fuel.current - 1 then
private.updateState()
private.endMove()
else
assert(false)
end
else
state.fuel.current = turtle.getFuelLevel()
state.fuel.id = nil
private.save("fuel")
end
if state.path then
local result, _ = not private.startupResult or
private.startupResult.result
if result then
private.navigate()
else
private.endNavigate()
end
end
state.isInitializing = nil
state.isInitialized = true
end
function private.toMC(x, y, z, facing)
if useMinecraftCoordinates then
return y, z, -x, facing and (facing + 2) % 4 or nil
else
return x, y, z, facing
end
end
function private.fromMC(x, y, z, facing)
if useMinecraftCoordinates then
return -z, x, y, facing and (facing + 2) % 4 or nil
else
return x, y, z, facing
end
end
function private.waitForResponse(ids)
if type(ids) ~= "table" then
ids = {ids}
elseif #ids == 0 then
return true
end
local success = true
repeat
local event, responseID, result = os.pullEvent("turtle_response")
if event == "turtle_response" then
for i = 1, #ids do
if ids[i] == responseID then
success = success and result
table.remove(ids, i)
break
end
end
end
until #ids == 0
return success
end
function private.tryGetReason(direction)
local detect = ({
[private.direction.forward] = turtle.detect,
[private.direction.up]      = turtle.detectUp,
[private.direction.down]    = turtle.detectDown})[direction]
local sideName = ({
[private.direction.forward] = "front",
[private.direction.up]      = "top",
[private.direction.down]    = "bottom"})[direction]
if peripheral.getType(sideName) == "turtle" then
return reason.turtle
elseif detect then
if detect() then
return reason.block
else
return reason.entity
end
else
return reason.unknown
end
end
function private.forward(tries, aggressive)
return private.move(private.direction.forward, tries, aggressive)
end
function private.back(tries)
return private.move(private.direction.back, tries)
end
function private.up(tries, aggressive)
return private.move(private.direction.up, tries, aggressive)
end
function private.down(tries, aggressive)
return private.move(private.direction.down, tries, aggressive)
end
function private.turn(towards)
local ids, position = {}, state.position
if useMinecraftCoordinates then
towards = (towards + 2) % 4
end
while position.f ~= towards do
local id
if towards == (position.f + 1) % 4 then
id = turtle.native.turnRight()
if id == -1 then
return false, reason.queue_full
end
position.f = (position.f + 1) % 4
else
id = turtle.native.turnLeft()
if id == -1 then
return false, reason.queue_full
end
position.f = (position.f - 1) % 4
end
private.save("position")
table.insert(ids, id)
end
return private.waitForResponse(ids)
end
function private.move(direction, tries, aggressive)
assert(tries == nil or type(tries) == "number",
"'tries' must be a number or omitted")
assert(aggressive == nil or type(aggressive) == "boolean",
"'aggressive' must be a boolean or omitted")
if turtle.getFuelLevel() < 1 then
return false, reason.fuel
end
tries = tonumber(tries or 0)
aggressive = aggressive and true or nil
local move = ({
[private.direction.forward] = turtle.native.forward,
[private.direction.back]    = turtle.native.back,
[private.direction.up]      = turtle.native.up,
[private.direction.down]    = turtle.native.down})[direction]
local detect = ({
[private.direction.forward] = turtle.detect,
[private.direction.up]      = turtle.detectUp,
[private.direction.down]    = turtle.detectDown})[direction]
local dig = ({
[private.direction.forward] = turtle.dig,
[private.direction.up]      = turtle.digUp,
[private.direction.down]    = turtle.digDown})[direction]
local attack = ({
[private.direction.forward] = turtle.attack,
[private.direction.up]      = turtle.attackUp,
[private.direction.down]    = turtle.attackDown})[direction]
local side = ({
[private.direction.forward] = "front",
[private.direction.back]    = "back",
[private.direction.up]      = "top",
[private.direction.down]    = "bottom"})[direction]
state.move = {
direction = direction,
tries = tries,
aggressive = aggressive
}
while true do
if peripheral.getType(side) == "turtle" then
if state.move.tries > 0 then
private.save("move")
end
else
local moveId = move()
if moveId == -1 then
private.endMove()
return false, reason.queue_full
end
private.save("move")
private.wrapStartup()
local success = private.waitForResponse(moveId)
private.unwrapStartup()
if success then
private.updateState()
private.endMove()
return true
end
end
if state.move.tries == 0 then
private.endMove()
return false, private.tryGetReason(direction)
end
if peripheral.getType(side) == "turtle" then
os.sleep(1)
elseif dig and dig() then
os.sleep(0.5)
elseif peripheral.getType(side) == "turtle" then
os.sleep(1)
elseif aggressive and attack and attack() then
elseif peripheral.getType(side) == "turtle" then
os.sleep(1)
elseif detect then
local block = detect()
if peripheral.getType(side) == "turtle" then
os.sleep(1)
elseif block then
private.endMove()
return false, reason.unbreakable_block
else
if state.move.tries == 1 then
private.endMove()
return false, reason.invulnerable_entity
end
os.sleep(1)
end
else
os.sleep(0.5)
end
state.move.tries = state.move.tries - 1
end
end
function private.updateState()
local position = state.position
local direction = private.direction[state.move.direction]
local delta = {
forward = { 1,  0,  0},
right   = { 0,  1,  0},
back    = {-1,  0,  0},
left    = { 0, -1,  0},
up      = { 0,  0,  1},
down    = { 0,  0, -1}
}
for i=1,position.f do
delta.forward, delta.right, delta.back, delta.left =
delta.right, delta.back, delta.left, delta.forward
end
position.x = position.x + delta[direction][1]
position.y = position.y + delta[direction][2]
position.z = position.z + delta[direction][3]
private.save("position")
state.fuel.current = turtle.getFuelLevel()
private.save("fuel")
end
function private.endMove()
state.move = nil
fs.delete(stateFile.move)
end
function private.navigate()
assert(#state.path.steps > 0, "you found a bug")
local function travel(axis, distance)
if distance == 0 then
return true
end
local directions = ({
x = {side.north, side.south},
y = {side.east, side.west}})[axis]
if directions then
local direction = distance > 0 and directions[1] or directions[2]
local result, failureReason = private.turn(direction)
if not result then
return result, failureReason
end
end
local action = ({
x = private.forward,
y = private.forward,
z = distance > 0 and private.up or private.down})[axis]
distance = math.abs(distance)
local tries, aggressive = state.path.tries, state.path.aggressive
while distance > 0 do
local result, failureReason = action(tries, aggressive)
if not result then
return result, failureReason
end
distance = distance - 1
end
return true
end
private.wrapStartup()
local function shortestFirstComparator(a, b)
return math.abs(a.distance) < math.abs(b.distance)
end
local function longestFirstComparator(a, b)
return math.abs(a.distance) > math.abs(b.distance)
end
local result, failureReason = true
local comparator = state.path.longestFirst and
longestFirstComparator or
shortestFirstComparator
repeat
local position = state.position
local x, y, z = position.x, position.y, position.z, position.f
local step = state.path.steps[1]
local dx, dy, dz = step.x - x, step.y - y, step.z - z
local axisCount = (dx ~= 0 and 1 or 0) +
(dy ~= 0 and 1 or 0) +
(dz ~= 0 and 1 or 0)
if state.path.longestFirst and axisCount > 1 then
local axes = {{axis = 1, distance = dx},
{axis = 2, distance = dy},
{axis = 3, distance = dz}}
table.sort(axes, shortestFirstComparator)
local stopover = {step.x, step.y, step.z}
for _, entry in ipairs(axes) do
stopover[entry.axis] = stopover[entry.axis] - entry.distance
if stopover[1] == x and
stopover[2] == y and
stopover[3] == z
then
break
end
local stopoverCopy = {x = stopover[1],
y = stopover[2],
z = stopover[3]}
table.insert(state.path.steps, 1, stopoverCopy)
end
else
local axes = {{axis = "x", distance = dx},
{axis = "y", distance = dy},
{axis = "z", distance = dz}}
table.sort(axes, comparator)
for _, entry in ipairs(axes) do
result, failureReason = travel(entry.axis, entry.distance)
if not result then
break
end
end
if result and step.f ~= nil then
if useMinecraftCoordinates then
step.f = (step.f + 2) % 4
end
result, failureReason = private.turn(step.f)
end
table.remove(state.path.steps, 1)
end
private.save("path")
until not result or #state.path.steps == 0
private.endNavigate()
private.unwrapStartup()
return result, failureReason
end
function private.endNavigate()
state.path = nil
fs.delete(stateFile.path)
end