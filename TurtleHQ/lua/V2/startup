local s_Label = os.getComputerLabel()
if(s_Label == nil) then
    print("No label set. Copying Startup Data.")
    fs.copy("disk/startup", "/startup")
    return
end

local monitor
function Log(p_Message, p_Color)
    print(p_Message)
    if(peripheral.getType("left") == "monitor" ) then
        monitor = peripheral.wrap("left")
    end
    if(monitor ~= nil) then

        monitor.clear()
        monitor.setCursorPos(1,1)
        monitor.setTextScale(1.5)
        if(p_Color == nil) then
            p_Color = colors.white
        end
        monitor.setTextColor(p_Color)
        monitor.write(p_Message)
        monitor.setTextColor(colors.white)

    end
end



Log("Loading...")
if(s_Label == "MainFrame") then
	shell.setDir("disk")
	shell.run("MainFrame.lua")


    Log("Offline", colors.red)

    return
end
print(s_Label)
print("Initializing...")

--===== OPEN REDNET =====--
for _, side in ipairs(redstone.getSides()) do
    if peripheral.getType(side) == "modem" then
        rednet.open(side)
    end
end

if not rednet.isOpen() then
    printError("could not open rednet")
    return
end

--===== SET REDNET PROTOCOL =====--
local POWNET_SERVER_PROTOCOL = "PowNet:Server"


--===== Find MainFrame =====--
local host = rednet.lookup(POWNET_SERVER_PROTOCOL, "MAINFRAME")
if not host then
	print("Failed to connect to MainFrame")
    Log("Error", colors.red)
end





print("Connected to MainFrame. Requesting update...")

local function sendAndWaitForResponse(recipientID, message, protocol)
    rednet.send(recipientID, message, protocol)
    local attemptNumber = 1
    while true do
        local senderID, reply = rednet.receive(protocol, REDNET_TIMEOUT)
        if senderID == recipientID and type(reply) == "table" and reply.type == message.type and reply.ID == message.ID then
            return reply.data
        elseif not senderID then
            if attemptNumber < 3 then
                rednet.send(recipientID, message, protocol)
                attemptNumber = attemptNumber + 1
            else
                return false
            end
        end
    end
end

local MESSAGE_TYPE = {
    GET = 0,
    SET = 1,
    INIT = 2,
    REGISTER = 3,
    UPDATE = 4
}




function Update(p_Module)
    local s_Message = {
        type = MESSAGE_TYPE.UPDATE,
        ID = math.random(0, 2^30),
        dataKey = p_Module,
        data = false
    }

    local s_Response = sendAndWaitForResponse(host, s_Message, POWNET_SERVER_PROTOCOL)
    if not s_Response then
        print("Failed to receive program: " .. p_Module)
        Log("Error", colors.red)
        return
    end
    if(s_Response == "InvalidName") then
        error("No module by this name: " .. p_Module)
    end

    local file = fs.open("/" .. p_Module, "w")
    file.write(s_Response)
    file.close()
    print("Successfully updated module: " .. p_Module)
end
Update("startup")
Update(s_Label .. ".lua")
print("starting " .. s_Label .. "...")
if(monitor) then
    monitor.clear()
    monitor.setCursorPos(1,1)
    monitor.setTextScale(1.5)
    monitor.setTextColor(colors.green)
    monitor.write("Booting!")
    monitor.setTextColor(colors.white)
end
shell.run(s_Label .. ".lua")
if(monitor) then
    monitor.clear()
    monitor.setCursorPos(1,1)
    monitor.setTextScale(1.5)
    monitor.setTextColor(colors.red)
    monitor.write("Offline")
    monitor.setTextColor(colors.white)
end
