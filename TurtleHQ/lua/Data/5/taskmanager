--TaskManager
rednet.open("top")
local monitor = peripheral.wrap( "right" )
monitor.clear()
monitor.setCursorPos(1,1)
monitor.setTextScale(0.5)

local m_Tasks = {}

function ReportStatus()
	local s_Message = {
		name = "ServerStatus",
		realm = "Server",
		server = "TaskManager",
		status = "Online"
	}
	rednet.broadcast(textutils.serialize( s_Message ))
end



function OnSetTask( p_Command )
	local s_Task = {
		name = p_Command.taskName,
		id = p_Command.id,
		progress = 0,
	}
	m_Tasks[s_Task.id] = s_Task
	local s_Task = p_Command.task
	rednet.send(p_Command.id, textutils.serialize( s_Task ))
end

local m_Commands = {
	SetTask = OnSetTask,
}

function Render()
	monitor.clear()
	monitor.setCursorPos(1,1)
	monitor.write("Tasks in progress:")	
	local i = 1;		
	for k,l_Task in pairs(m_Tasks) do
		i = i + 1
		monitor.setCursorPos(1,i)
		monitor.write(l_Task.id .. " | " .. l_Task.progress .. "% | " .. l_Task.name)
		print("Write")
	end
end


function ParseCommand( p_Command )
	local s_Command = textutils.unserialize( tostring(p_Command) )
	if(s_Command == nil) then
		print("Could not deserialize command?")
		return
	end
	local s_CommandName = s_Command.name
	if(s_CommandName == nil) then
		print("nil command")
		return
	end
	return s_Command
end

function OnRecieveCommand( p_Id, p_Command )
	print(p_Command.name)
	local s_CommandFunction = m_Commands[p_Command.name]
	if (s_CommandFunction == nil) then
		print("No command with that name found")
		return
	end
	print("Executing Command: " .. p_Command.name)
	local s_Result = s_CommandFunction(p_Command)
	if(s_Result == nil) then
		print(p_Command.name .. " returned nil")
		return
	end
	print("end")

end

function Start()
	ReportStatus()
	while(true) do
		print("Waiting for signal...")
		Render()
		local id, text = rednet.receive() -- need to capture the output from the receive in some vars
		print(id .. ": " .. text)
		local s_Command = ParseCommand(text)
		if(s_Command ~= nil) then
			OnRecieveCommand(id, s_Command)
		else
			print("error " .. id .. ": " .. text)
		end
	end
end

Start()
